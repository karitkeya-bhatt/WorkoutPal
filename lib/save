import 'dart:async';
import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'constants.dart';
import 'package:flutter/services.dart';
import 'package:auto_size_text_field/auto_size_text_field.dart';

StreamController<int> streamController = StreamController<int>.broadcast();

class RoutinePage extends StatefulWidget {
  final String day;
  final Stream<int> stream;

  RoutinePage(this.day, this.stream);

  @override
  _RoutinePageState createState() => _RoutinePageState();
}

class _RoutinePageState extends State<RoutinePage> {
  void mySetState() {
    if (!this.mounted) return;
    setState(() {
      list.add(WorkoutButton());
    });
  }

  @override
  void initState() {
    super.initState();
    widget.stream.listen((index) {
      mySetState();
    });
  }

  static List<WorkoutButton> list = [];

  static List<WorkoutButton> getButtons() {
    return list;
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: Container(
            color: blue,
            alignment: Alignment.center,
            child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  Center(child: DayHeader(widget.day)),
                  MyReorderableList(),
                  AddButton()
                ])));
  }
}

class DayHeader extends StatefulWidget {
  final String day;
  DayHeader(this.day);

  @override
  _DayHeaderState createState() => _DayHeaderState();
}

class _DayHeaderState extends State<DayHeader> {
  String name = "Enter Workout Name";
  final myController = TextEditingController();

  @override
  void dispose() {
    myController.dispose();
    super.dispose();
  }

  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Container(
        child: Column(
          children: [
            RichText(
              textAlign: TextAlign.center,
              text: TextSpan(
                text: widget.day,
                style: TextStyle(
                  fontSize: 50,
                  color: white,
                  fontFamily: 'Ubuntu',
                ),
              ),
            ),
            AutoSizeTextField(
                controller: TextEditingController(text: name),
                maxLines: 1,
                minFontSize: 20,
                cursorColor: white,
                inputFormatters: [
                  LengthLimitingTextInputFormatter(30),
                ],
                decoration: new InputDecoration(
                  border: InputBorder.none,
                  focusedBorder: InputBorder.none,
                  enabledBorder: InputBorder.none,
                  errorBorder: InputBorder.none,
                ),
                onChanged: (text) {
                  name = text;
                  print(text);
                },
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 24,
                  color: white,
                  fontFamily: 'Ubuntu',
                ))
          ],
        ),
      ),
    );
  }
}

class WorkoutButton extends StatefulWidget {
  @override
  _WorkoutButtonState createState() => _WorkoutButtonState();
}

class _WorkoutButtonState extends State<WorkoutButton> {
  TextEditingController _textFieldController = TextEditingController();
  Future<void> _displayTextInputDialog(BuildContext context) async {
    return showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
              title: Text('TextField in Dialog'),
              content: TextField(
                onChanged: (value) {
                  setState(() {
                    print(value);
                  });
                },
                controller: _textFieldController,
                decoration: InputDecoration(hintText: "Text Field in Dialog"),
              ),
              actions: <Widget>[
                TextButton(
                  style: TextButton.styleFrom(
                    primary: blue,
                  ),
                  child: Text('CANCEL'),
                  onPressed: () {
                    setState(() {
                      Navigator.pop(context);
                    });
                  },
                ),
              ]);
        });
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Card(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(25.0),
        ),
        child: ListTile(
          title: Text("Assisted Pull Up",
              textAlign: TextAlign.left,
              maxLines: 1,
              style: TextStyle(
                fontSize: 26,
                color: blue,
                fontFamily: 'Ubuntu',
                fontWeight: FontWeight.bold,
              )),
          subtitle: Text("2 x 12 at 20 lbs.",
              maxLines: 1,
              textAlign: TextAlign.left,
              style: TextStyle(
                fontSize: 20,
                color: blue,
                fontFamily: 'Ubuntu',
              )),
          trailing: GestureDetector(
            onTapDown: (TapDownDetails d) {
                _displayTextInputDialog(context);
            },
            child: Icon(
              Icons.drag_handle,
              size: 30,
            ),
          ),
        ),
      ),
    );
  }
}

class MyReorderableList extends StatefulWidget {
  @override
  _MyReorderableListState createState() => _MyReorderableListState();
}

class _MyReorderableListState extends State<MyReorderableList> {
  List<int> order = [];
  final List<WorkoutButton> buttons = _RoutinePageState.getButtons();

  @override
  Widget build(BuildContext context) {
    return Expanded(
        child: Theme(
      data: ThemeData(
        canvasColor: Colors.transparent,
        shadowColor: Colors.transparent,
      ),
      child: ListView.builder(
        itemCount: buttons.length,
        itemBuilder: (BuildContext context, int index) {
          return Dismissible(
            onDismissed: (DismissDirection direction) {
              setState(() {
                buttons.removeAt(index);
              });
            },
            secondaryBackground: Container(),
            background: Container(),
            child: buttons[index],
            key: UniqueKey(),
            direction: DismissDirection.startToEnd,
          );
        },
      ),
    ));
  }
}

class AddButton extends StatefulWidget {
  _AddButtonState createState() => _AddButtonState();
}

class _AddButtonState extends State<AddButton> {
  bool isHeld = false;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: GestureDetector(
        onTap: () {
          setState(() {
            streamController.add(1);
          });
        },
        onTapDown: (TapDownDetails d) {
          setState(() {
            isHeld = true;
          });
        },
        onTapUp: (TapUpDetails d) {
          setState(() {
            isHeld = false;
          });
        },
        onTapCancel: () {
          setState(() {
            isHeld = false;
          });
        },
        child: Container(
            child: Icon(
          Icons.add_circle_outline,
          color: isHeld ? yellow : white,
          size: 45.0,
        )),
      ),
    );
  }
}
